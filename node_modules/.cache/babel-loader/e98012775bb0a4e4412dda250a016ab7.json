{"ast":null,"code":"import { action, thunk } from \"easy-peasy\";\nimport { LoginService, RegisterService, EmailConfirmationService, ResendEmailService, ForgotPasswordService, ChangePasswordService, LogoutService } from '../services/authService';\nimport { item, sessionItem } from '../configs/index';\nconst authModel = {\n  requestResponse: null,\n  isLoading: false,\n  isAuthed: true,\n  login: thunk((Actions, loginData) => {\n    Actions.toggleIsLoading();\n    return LoginService(loginData.data); // .then((data) => {\n    //   if (data.status) {\n    //     localStorage.setItem(item,data.data.token)\n    //     sessionStorage.setItem(sessionItem,JSON.stringify(data.data.user))\n    //     const newPayload = {\n    //       type: \"success\",\n    //       msg: data.data.message,\n    //     };\n    //     Actions.updateRequestResponse(newPayload)\n    //     Actions.loginSuccess()\n    //     Actions.toggleIsLoading();  \n    //     // if(data.data.user.isVerified === 0){\n    //     //   loginData.history.push(\"/account-verification\") \n    //     // }else{\n    //     //   loginData.history.push(\"/homepage\") \n    //     // }\n    //   }\n    //    else {\n    //       const payload = {\n    //           type: 'error',\n    //           msg:data.error\n    //       }\n    //       Actions.updateRequestResponse(payload);\n    //       Actions.toggleIsLoading();\n    //   }\n    // })\n  }),\n  logout: thunk(Actions => {\n    Actions.toggleIsLoading();\n    LogoutService().then(data => {\n      if (data.status) {\n        localStorage.removeItem(item);\n        sessionStorage.removeItem(sessionItem);\n        const newPayload = {\n          type: \"success\",\n          msg: data.data.message\n        };\n        Actions.updateRequestResponse(newPayload);\n        Actions.logoutSuccess();\n        Actions.toggleIsLoading();\n      } else {\n        const payload = {\n          type: 'error',\n          msg: data.error\n        };\n        Actions.updateRequestResponse(payload);\n        Actions.toggleIsLoading();\n      }\n    });\n  }),\n  register: thunk((Actions, registerData) => {\n    Actions.toggleIsLoading();\n\n    if (registerData.data.password !== registerData.data.confirmPassword) {\n      const payload = {\n        type: \"error\",\n        msg: \"Passwords do not match\"\n      };\n      Actions.updateRequestResponse(payload);\n      Actions.toggleIsLoading();\n      return;\n    }\n\n    RegisterService(registerData.data).then(data => {\n      if (data.status) {\n        const payload = {\n          type: \"success\",\n          msg: data.data.message\n        };\n        Actions.updateRequestResponse(payload);\n        Actions.toggleIsLoading();\n        registerData.history.push(\"/registration-success-notification\");\n      } else {\n        const payload = {\n          type: \"error\",\n          msg: data.error\n        };\n        Actions.updateRequestResponse(payload);\n        Actions.toggleIsLoading();\n      }\n    });\n  }),\n  confirmEmail: thunk((Actions, token) => {\n    Actions.toggleIsLoading();\n\n    if (token === '') {\n      const payload = {\n        type: \"error\",\n        msg: \"Invalid Token\"\n      };\n      Actions.updateRequestResponse(payload);\n      Actions.toggleIsLoading();\n      return;\n    }\n\n    EmailConfirmationService(token).then(data => {\n      if (data.status) {\n        const payload = {\n          type: \"success\",\n          msg: data.data.message\n        };\n        Actions.updateRequestResponse(payload);\n        Actions.toggleIsLoading();\n      } else {\n        const payload = {\n          type: \"error\",\n          msg: data.error\n        };\n        Actions.updateRequestResponse(payload);\n        Actions.toggleIsLoading();\n      }\n    });\n  }),\n  resendToken: thunk((Actions, token) => {\n    Actions.toggleIsLoading();\n\n    if (token === '') {\n      const payload = {\n        type: \"error\",\n        msg: \"Invalid Token\"\n      };\n      Actions.updateRequestResponse(payload);\n      Actions.toggleIsLoading();\n      return;\n    }\n\n    ResendEmailService(token).then(data => {\n      if (data.status) {\n        const payload = {\n          type: \"success\",\n          msg: data.data.message\n        };\n        Actions.updateRequestResponse(payload);\n        Actions.toggleIsLoading();\n      } else {\n        const payload = {\n          type: \"error\",\n          msg: data.error\n        };\n        Actions.updateRequestResponse(payload);\n        Actions.toggleIsLoading();\n      }\n    });\n  }),\n  forgotPassword: thunk((Actions, forgotData) => {\n    Actions.toggleIsLoading();\n\n    if (forgotData.data.email === '') {\n      const payload = {\n        type: \"error\",\n        msg: \"Email Field Must be Filled\"\n      };\n      Actions.updateRequestResponse(payload);\n      Actions.toggleIsLoading();\n      return;\n    }\n\n    ForgotPasswordService(forgotData.data).then(data => {\n      if (data.status) {\n        console.log(data);\n        const payload = {\n          type: \"success\",\n          msg: data.data.message\n        };\n        Actions.updateRequestResponse(payload);\n        Actions.toggleIsLoading();\n      } else {\n        const payload = {\n          type: \"error\",\n          msg: data.error\n        };\n        Actions.updateRequestResponse(payload);\n        Actions.toggleIsLoading();\n      }\n    });\n  }),\n  changePassword: thunk((Actions, changePasswordData) => {\n    Actions.toggleIsLoading();\n\n    if (changePasswordData.data.password === '' || changePasswordData.data.password !== changePasswordData.data.confirmPassword || changePasswordData.data.token === '') {\n      const payload = {\n        type: \"error\",\n        msg: \"Kindly Ensure all Fields are Correctly Filled\"\n      };\n      Actions.updateRequestResponse(payload);\n      Actions.toggleIsLoading();\n      return;\n    }\n\n    ChangePasswordService(changePasswordData.data).then(data => {\n      if (data.status) {\n        const payload = {\n          type: \"success\",\n          msg: data.data.message\n        };\n        Actions.updateRequestResponse(payload);\n        Actions.toggleIsLoading();\n        changePasswordData.history.push('/login');\n      } else {\n        const payload = {\n          type: \"error\",\n          msg: data.error\n        };\n        Actions.updateRequestResponse(payload);\n        Actions.toggleIsLoading();\n      }\n    });\n  }),\n  //actions\n  toggleIsLoading: action(state => {\n    state.isLoading = !state.isLoading;\n  }),\n  updateRequestResponse: action((state, payload) => {\n    state.requestResponse = payload;\n  }),\n  clearResponse: action(state => {\n    state.requestResponse = null;\n  }),\n  loginSuccess: action(state => {\n    state.isAuthed = true;\n  }),\n  logoutSuccess: action(state => {\n    state.isAuthed = false;\n  })\n};\nexport default authModel;","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/projects/React/space-repetition/src/Store/models/authModel.js"],"names":["action","thunk","LoginService","RegisterService","EmailConfirmationService","ResendEmailService","ForgotPasswordService","ChangePasswordService","LogoutService","item","sessionItem","authModel","requestResponse","isLoading","isAuthed","login","Actions","loginData","toggleIsLoading","data","logout","then","status","localStorage","removeItem","sessionStorage","newPayload","type","msg","message","updateRequestResponse","logoutSuccess","payload","error","register","registerData","password","confirmPassword","history","push","confirmEmail","token","resendToken","forgotPassword","forgotData","email","console","log","changePassword","changePasswordData","state","clearResponse","loginSuccess"],"mappings":"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","sourcesContent":["import { action, thunk } from \"easy-peasy\";\nimport {LoginService, RegisterService, \n        EmailConfirmationService, ResendEmailService,\n        ForgotPasswordService, ChangePasswordService, LogoutService\n} from '../services/authService'\nimport {item,sessionItem} from '../configs/index'\n\nconst authModel = {\n  requestResponse: null,\n  isLoading: false,\n  isAuthed: true,\n\n  login: thunk((Actions, loginData) => {\n    Actions.toggleIsLoading();\n   return LoginService(loginData.data)\n      // .then((data) => {\n      //   if (data.status) {\n      //     localStorage.setItem(item,data.data.token)\n      //     sessionStorage.setItem(sessionItem,JSON.stringify(data.data.user))\n      //     const newPayload = {\n      //       type: \"success\",\n      //       msg: data.data.message,\n      //     };\n      //     Actions.updateRequestResponse(newPayload)\n      //     Actions.loginSuccess()\n      //     Actions.toggleIsLoading();  \n      //     // if(data.data.user.isVerified === 0){\n      //     //   loginData.history.push(\"/account-verification\") \n      //     // }else{\n      //     //   loginData.history.push(\"/homepage\") \n      //     // }\n                \n      //   }\n      //    else {\n      //       const payload = {\n      //           type: 'error',\n      //           msg:data.error\n      //       }\n      //       Actions.updateRequestResponse(payload);\n      //       Actions.toggleIsLoading();\n      //   }\n      // })\n  }),\n\n  logout: thunk((Actions) => {\n    Actions.toggleIsLoading();\n    LogoutService()\n      .then((data) => {\n        if (data.status) {\n          localStorage.removeItem(item)\n          sessionStorage.removeItem(sessionItem)\n          const newPayload = {\n            type: \"success\",\n            msg: data.data.message,\n          };\n          Actions.updateRequestResponse(newPayload)\n          Actions.logoutSuccess()\n          Actions.toggleIsLoading();          \n        }\n         else {\n            const payload = {\n                type: 'error',\n                msg:data.error\n            }\n            Actions.updateRequestResponse(payload);\n            Actions.toggleIsLoading();\n        }\n      })\n  }),\n\n  register: thunk((Actions, registerData) => {\n    Actions.toggleIsLoading();\n    if (registerData.data.password !== registerData.data.confirmPassword) {\n        const payload = {\n          type: \"error\",\n          msg: \"Passwords do not match\",\n        };\n        Actions.updateRequestResponse(payload);\n        Actions.toggleIsLoading();\n        return\n    }\n    RegisterService(registerData.data)\n    .then((data) =>{\n        if (data.status) {\n          const payload = {\n            type: \"success\",\n            msg: data.data.message,\n          };\n          Actions.updateRequestResponse(payload);\n          Actions.toggleIsLoading();\n          registerData.history.push(\"/registration-success-notification\");\n        }\n         else {\n          const payload = {\n            type: \"error\",\n            msg: data.error,\n          };\n          Actions.updateRequestResponse(payload);\n          Actions.toggleIsLoading();\n        }\n    })\n  }),\n\n  confirmEmail: thunk((Actions, token) => {\n    Actions.toggleIsLoading();\n    if (token ===''){\n        const payload = {\n          type: \"error\",\n          msg: \"Invalid Token\",\n        };\n        Actions.updateRequestResponse(payload);\n        Actions.toggleIsLoading();\n        return\n    }\n    EmailConfirmationService(token)\n    .then((data) =>{\n        if (data.status) {\n          const payload = {\n            type: \"success\",\n            msg: data.data.message,\n          };\n          Actions.updateRequestResponse(payload);\n          Actions.toggleIsLoading();\n        }\n         else {\n          const payload = {\n            type: \"error\",\n            msg: data.error,\n          };\n          Actions.updateRequestResponse(payload);\n          Actions.toggleIsLoading();\n        }\n    })\n  }),\n  resendToken: thunk((Actions, token) => {\n    Actions.toggleIsLoading();\n    if (token ===''){\n        const payload = {\n          type: \"error\",\n          msg: \"Invalid Token\",\n        };\n        Actions.updateRequestResponse(payload);\n        Actions.toggleIsLoading();\n        return\n    }\n    ResendEmailService(token)\n    .then((data) =>{\n        if (data.status) {\n          const payload = {\n            type: \"success\",\n            msg: data.data.message,\n          };\n          Actions.updateRequestResponse(payload);\n          Actions.toggleIsLoading();\n        }\n         else {\n          const payload = {\n            type: \"error\",\n            msg: data.error,\n          };\n          Actions.updateRequestResponse(payload);\n          Actions.toggleIsLoading();\n        }\n    })\n  }),\n  forgotPassword: thunk((Actions, forgotData) => {\n    Actions.toggleIsLoading();\n    if (forgotData.data.email ===''){\n        const payload = {\n          type: \"error\",\n          msg: \"Email Field Must be Filled\",\n        };\n        Actions.updateRequestResponse(payload);\n        Actions.toggleIsLoading();\n        return\n    }\n    ForgotPasswordService(forgotData.data)\n    .then((data) =>{\n        if (data.status) {\n          console.log(data)\n          const payload = {\n            type: \"success\",\n            msg: data.data.message,\n          };\n          Actions.updateRequestResponse(payload);\n          Actions.toggleIsLoading();\n        }\n         else {\n          const payload = {\n            type: \"error\",\n            msg: data.error,\n          };\n          Actions.updateRequestResponse(payload);\n          Actions.toggleIsLoading();\n        }\n    })\n  }),\n\n  changePassword: thunk((Actions, changePasswordData) => {\n    Actions.toggleIsLoading();\n    if (changePasswordData.data.password ==='' || changePasswordData.data.password !== changePasswordData.data.confirmPassword || changePasswordData.data.token ===''){\n        const payload = {\n          type: \"error\",\n          msg: \"Kindly Ensure all Fields are Correctly Filled\",\n        };\n        Actions.updateRequestResponse(payload);\n        Actions.toggleIsLoading();\n        return\n    }\n    ChangePasswordService(changePasswordData.data)\n    .then((data) =>{\n        if (data.status) {\n          const payload = {\n            type: \"success\",\n            msg: data.data.message,\n          };\n          Actions.updateRequestResponse(payload);\n          Actions.toggleIsLoading();\n          changePasswordData.history.push('/login')\n        }\n        else {\n          const payload = {\n            type: \"error\",\n            msg: data.error,\n          };\n          Actions.updateRequestResponse(payload);\n          Actions.toggleIsLoading();\n        }\n    })\n  }),\n\n  //actions\n  toggleIsLoading : action((state) => {\n    state.isLoading = !state.isLoading;\n  }),\n\n  updateRequestResponse: action((state, payload) => {\n    state.requestResponse = payload;\n  }),\n\n  clearResponse: action((state) => {\n    state.requestResponse = null;\n  }),\n\n  loginSuccess: action((state)=> {\n      state.isAuthed = true;\n  }),\n  logoutSuccess: action((state)=> {\n      state.isAuthed = false;\n  })\n};\n\nexport default authModel"]},"metadata":{},"sourceType":"module"}