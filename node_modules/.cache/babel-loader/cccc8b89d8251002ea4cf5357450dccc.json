{"ast":null,"code":"import { action, thunk } from \"easy-peasy\";\nimport { FetchTodoService, UpdateTodoService } from '../services/todoService';\nimport { item, sessionItem } from '../configs/index';\nconst todoModel = {\n  todos: [],\n  isLoading: false,\n  requestResponse: \"\",\n  fetchTodos: thunk((Actions, nill, helpers) => {\n    const authActions = helpers.getStoreActions(Action => Action);\n    Actions.toggleIsLoading();\n    FetchTodoService().then(data => {\n      if (data.status === 200) {\n        Actions.fetchSuccess(data.data.todos);\n        Actions.toggleIsLoading();\n      }\n\n      if (data.status === 401) {\n        localStorage.removeItem(item);\n        sessionStorage.removeItem(sessionItem);\n        authActions.auth.logout();\n      }\n    });\n  }),\n  updateTodos: thunk((Actions, payload, helpers) => {\n    const authActions = helpers.getStoreActions(Action => Action);\n    Actions.toggleIsLoading();\n    UpdateTodoService(payload).then(data => {\n      if (data.status === 200) {\n        console.log(data.data.todos);\n        Actions.fetchSuccess(data.data.todos);\n        Actions.toggleIsLoading();\n      }\n\n      if (data.status === 401) {\n        localStorage.removeItem(item);\n        sessionStorage.removeItem(sessionItem);\n        authActions.auth.logout();\n      }\n    });\n  }),\n  //actions\n  toggleIsLoading: action(state => {\n    state.isLoading = !state.isLoading;\n  }),\n  updateRequestResponse: action((state, payload) => {\n    state.requestResponse = payload;\n  }),\n  clearResponse: action(state => {\n    state.requestResponse = null;\n  }),\n  fetchSuccess: action((state, payload) => {\n    state.todos = payload;\n  })\n};\nexport default todoModel;","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/projects/React/space-repetition/src/Store/models/todoModel.js"],"names":["action","thunk","FetchTodoService","UpdateTodoService","item","sessionItem","todoModel","todos","isLoading","requestResponse","fetchTodos","Actions","nill","helpers","authActions","getStoreActions","Action","toggleIsLoading","then","data","status","fetchSuccess","localStorage","removeItem","sessionStorage","auth","logout","updateTodos","payload","console","log","state","updateRequestResponse","clearResponse"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,KAAjB,QAA8B,YAA9B;AACA,SAAQC,gBAAR,EAA0BC,iBAA1B,QACO,yBADP;AAEA,SAAQC,IAAR,EAAaC,WAAb,QAA+B,kBAA/B;AACA,MAAMC,SAAS,GAAG;AACdC,EAAAA,KAAK,EAAC,EADQ;AAEdC,EAAAA,SAAS,EAAE,KAFG;AAGdC,EAAAA,eAAe,EAAC,EAHF;AAKdC,EAAAA,UAAU,EAAET,KAAK,CAAC,CAACU,OAAD,EAAUC,IAAV,EAAeC,OAAf,KAA2B;AACzC,UAAMC,WAAW,GAAGD,OAAO,CAACE,eAAR,CAAwBC,MAAM,IAAIA,MAAlC,CAApB;AACAL,IAAAA,OAAO,CAACM,eAAR;AACAf,IAAAA,gBAAgB,GACbgB,IADH,CACSC,IAAD,IAAU;AACd,UAAGA,IAAI,CAACC,MAAL,KAAgB,GAAnB,EAAuB;AACnBT,QAAAA,OAAO,CAACU,YAAR,CAAqBF,IAAI,CAACA,IAAL,CAAUZ,KAA/B;AACAI,QAAAA,OAAO,CAACM,eAAR;AACH;;AACD,UAAGE,IAAI,CAACC,MAAL,KAAgB,GAAnB,EAAuB;AACnBE,QAAAA,YAAY,CAACC,UAAb,CAAwBnB,IAAxB;AACAoB,QAAAA,cAAc,CAACD,UAAf,CAA0BlB,WAA1B;AACAS,QAAAA,WAAW,CAACW,IAAZ,CAAiBC,MAAjB;AACH;AACF,KAXH;AAYD,GAfc,CALH;AAsBdC,EAAAA,WAAW,EAAE1B,KAAK,CAAC,CAACU,OAAD,EAAUiB,OAAV,EAAkBf,OAAlB,KAA8B;AAC7C,UAAMC,WAAW,GAAGD,OAAO,CAACE,eAAR,CAAwBC,MAAM,IAAIA,MAAlC,CAApB;AACAL,IAAAA,OAAO,CAACM,eAAR;AACAd,IAAAA,iBAAiB,CAACyB,OAAD,CAAjB,CACGV,IADH,CACSC,IAAD,IAAU;AACd,UAAGA,IAAI,CAACC,MAAL,KAAgB,GAAnB,EAAuB;AACnBS,QAAAA,OAAO,CAACC,GAAR,CAAYX,IAAI,CAACA,IAAL,CAAUZ,KAAtB;AACAI,QAAAA,OAAO,CAACU,YAAR,CAAqBF,IAAI,CAACA,IAAL,CAAUZ,KAA/B;AACAI,QAAAA,OAAO,CAACM,eAAR;AACH;;AACD,UAAGE,IAAI,CAACC,MAAL,KAAgB,GAAnB,EAAuB;AACnBE,QAAAA,YAAY,CAACC,UAAb,CAAwBnB,IAAxB;AACAoB,QAAAA,cAAc,CAACD,UAAf,CAA0BlB,WAA1B;AACAS,QAAAA,WAAW,CAACW,IAAZ,CAAiBC,MAAjB;AACH;AACF,KAZH;AAaD,GAhBe,CAtBJ;AAwCV;AACJT,EAAAA,eAAe,EAAEjB,MAAM,CAAE+B,KAAD,IAAW;AAC/BA,IAAAA,KAAK,CAACvB,SAAN,GAAkB,CAACuB,KAAK,CAACvB,SAAzB;AACH,GAFsB,CAzCT;AA6CdwB,EAAAA,qBAAqB,EAAEhC,MAAM,CAAC,CAAC+B,KAAD,EAAQH,OAAR,KAAoB;AAC9CG,IAAAA,KAAK,CAACtB,eAAN,GAAwBmB,OAAxB;AACH,GAF4B,CA7Cf;AAiDdK,EAAAA,aAAa,EAAEjC,MAAM,CAAE+B,KAAD,IAAW;AAC7BA,IAAAA,KAAK,CAACtB,eAAN,GAAwB,IAAxB;AACH,GAFoB,CAjDP;AAqDdY,EAAAA,YAAY,EAAErB,MAAM,CAAC,CAAC+B,KAAD,EAAQH,OAAR,KAAmB;AACpCG,IAAAA,KAAK,CAACxB,KAAN,GAAcqB,OAAd;AACH,GAFmB;AArDN,CAAlB;AA2DA,eAAetB,SAAf","sourcesContent":["import { action, thunk } from \"easy-peasy\";\nimport {FetchTodoService, UpdateTodoService\n} from '../services/todoService'\nimport {item,sessionItem} from '../configs/index'\nconst todoModel = {\n    todos:[],\n    isLoading: false,\n    requestResponse:\"\",\n\n    fetchTodos: thunk((Actions, nill,helpers) => {\n        const authActions = helpers.getStoreActions(Action => Action)\n        Actions.toggleIsLoading();\n        FetchTodoService()\n          .then((data) => {\n            if(data.status === 200){\n                Actions.fetchSuccess(data.data.todos)\n                Actions.toggleIsLoading(); \n            }\n            if(data.status === 401){\n                localStorage.removeItem(item)\n                sessionStorage.removeItem(sessionItem)\n                authActions.auth.logout()\n            }\n          })\n      }),\n\n    updateTodos: thunk((Actions, payload,helpers) => {\n        const authActions = helpers.getStoreActions(Action => Action)\n        Actions.toggleIsLoading();\n        UpdateTodoService(payload)\n          .then((data) => {\n            if(data.status === 200){\n                console.log(data.data.todos)\n                Actions.fetchSuccess(data.data.todos)\n                Actions.toggleIsLoading(); \n            }\n            if(data.status === 401){\n                localStorage.removeItem(item)\n                sessionStorage.removeItem(sessionItem)\n                authActions.auth.logout()\n            }\n          })\n      }),\n\n        //actions\n    toggleIsLoading: action((state) => {\n        state.isLoading = !state.isLoading;\n    }),\n\n    updateRequestResponse: action((state, payload) => {\n        state.requestResponse = payload;\n    }),\n\n    clearResponse: action((state) => {\n        state.requestResponse = null;\n    }),\n\n    fetchSuccess: action((state, payload)=> {\n        state.todos = payload;\n    }),\n\n}\n\nexport default todoModel;"]},"metadata":{},"sourceType":"module"}