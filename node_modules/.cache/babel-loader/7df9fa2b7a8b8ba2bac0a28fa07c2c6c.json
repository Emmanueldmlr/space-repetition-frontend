{"ast":null,"code":"import { action, thunk } from \"easy-peasy\";\nimport { LoginService, RegisterService, EmailConfirmationService, ResendEmailService, ForgotPasswordService, ChangePasswordService, LogoutService } from '../services/authService';\nimport { item, sessionItem } from '../configs/index';\nconst authModel = {\n  requestResponse: null,\n  isLoading: false,\n  isAuthed: true,\n  login: thunk((Actions, loginData) => {\n    Actions.toggleIsLoading();\n    LoginService(loginData.data).then(data => {\n      if (data.status) {\n        localStorage.removeItem(item);\n        sessionStorage.removeItem(sessionItem);\n        const newPayload = {\n          type: \"success\",\n          msg: data.data.message\n        };\n        Actions.updateRequestResponse(newPayload);\n        Actions.loginSuccess();\n        Actions.toggleIsLoading();\n\n        if (data.data.user.isVerified === 0) {\n          loginData.history.push(\"/account-verification\");\n        } else {\n          loginData.history.push(\"/\");\n        }\n      } else {\n        const payload = {\n          type: 'error',\n          msg: data.error\n        };\n        Actions.updateRequestResponse(payload);\n        Actions.toggleIsLoading();\n      }\n    });\n  }),\n  logout: thunk((Actions, history) => {\n    Actions.toggleIsLoading();\n    LogoutService().then(data => {\n      if (data.status) {\n        localStorage.setItem(item, data.data.token);\n        sessionStorage.setItem(sessionItem, JSON.stringify(data.data.user));\n        const newPayload = {\n          type: \"success\",\n          msg: data.data.message\n        };\n        Actions.updateRequestResponse(newPayload);\n        Actions.logoutSuccess();\n        Actions.toggleIsLoading();\n        history.push(\"/login\");\n      } else {\n        const payload = {\n          type: 'error',\n          msg: data.error\n        };\n        Actions.updateRequestResponse(payload);\n        Actions.toggleIsLoading();\n      }\n    });\n  }),\n  register: thunk((Actions, registerData) => {\n    Actions.toggleIsLoading();\n\n    if (registerData.data.password !== registerData.data.confirmPassword) {\n      const payload = {\n        type: \"error\",\n        msg: \"Passwords do not match\"\n      };\n      Actions.updateRequestResponse(payload);\n      Actions.toggleIsLoading();\n      return;\n    }\n\n    RegisterService(registerData.data).then(data => {\n      if (data.status) {\n        const payload = {\n          type: \"success\",\n          msg: data.data.message\n        };\n        Actions.updateRequestResponse(payload);\n        Actions.toggleIsLoading();\n        registerData.history.push(\"/registration-success-notification\");\n      } else {\n        const payload = {\n          type: \"error\",\n          msg: data.error\n        };\n        Actions.updateRequestResponse(payload);\n        Actions.toggleIsLoading();\n      }\n    });\n  }),\n  confirmEmail: thunk((Actions, token) => {\n    Actions.toggleIsLoading();\n\n    if (token === '') {\n      const payload = {\n        type: \"error\",\n        msg: \"Invalid Token\"\n      };\n      Actions.updateRequestResponse(payload);\n      Actions.toggleIsLoading();\n      return;\n    }\n\n    EmailConfirmationService(token).then(data => {\n      if (data.status) {\n        const payload = {\n          type: \"success\",\n          msg: data.data.message\n        };\n        Actions.updateRequestResponse(payload);\n        Actions.toggleIsLoading();\n      } else {\n        const payload = {\n          type: \"error\",\n          msg: data.error\n        };\n        Actions.updateRequestResponse(payload);\n        Actions.toggleIsLoading();\n      }\n    });\n  }),\n  resendToken: thunk((Actions, token) => {\n    Actions.toggleIsLoading();\n\n    if (token === '') {\n      const payload = {\n        type: \"error\",\n        msg: \"Invalid Token\"\n      };\n      Actions.updateRequestResponse(payload);\n      Actions.toggleIsLoading();\n      return;\n    }\n\n    ResendEmailService(token).then(data => {\n      if (data.status) {\n        const payload = {\n          type: \"success\",\n          msg: data.data.message\n        };\n        Actions.updateRequestResponse(payload);\n        Actions.toggleIsLoading();\n      } else {\n        const payload = {\n          type: \"error\",\n          msg: data.error\n        };\n        Actions.updateRequestResponse(payload);\n        Actions.toggleIsLoading();\n      }\n    });\n  }),\n  forgotPassword: thunk((Actions, forgotData) => {\n    Actions.toggleIsLoading();\n\n    if (forgotData.data.email === '') {\n      const payload = {\n        type: \"error\",\n        msg: \"Email Field Must be Filled\"\n      };\n      Actions.updateRequestResponse(payload);\n      Actions.toggleIsLoading();\n      return;\n    }\n\n    ForgotPasswordService(forgotData.data).then(data => {\n      if (data.status) {\n        console.log(data);\n        const payload = {\n          type: \"success\",\n          msg: data.data.message\n        };\n        Actions.updateRequestResponse(payload);\n        Actions.toggleIsLoading();\n      } else {\n        const payload = {\n          type: \"error\",\n          msg: data.error\n        };\n        Actions.updateRequestResponse(payload);\n        Actions.toggleIsLoading();\n      }\n    });\n  }),\n  changePassword: thunk((Actions, changePasswordData) => {\n    Actions.toggleIsLoading();\n\n    if (changePasswordData.data.password === '' || changePasswordData.data.password !== changePasswordData.data.confirmPassword || changePasswordData.data.token === '') {\n      const payload = {\n        type: \"error\",\n        msg: \"Kindly Ensure all Fields are Correctly Filled\"\n      };\n      Actions.updateRequestResponse(payload);\n      Actions.toggleIsLoading();\n      return;\n    }\n\n    ChangePasswordService(changePasswordData.data).then(data => {\n      if (data.status) {\n        const payload = {\n          type: \"success\",\n          msg: data.data.message\n        };\n        Actions.updateRequestResponse(payload);\n        Actions.toggleIsLoading();\n        changePasswordData.history.push('/login');\n      } else {\n        const payload = {\n          type: \"error\",\n          msg: data.error\n        };\n        Actions.updateRequestResponse(payload);\n        Actions.toggleIsLoading();\n      }\n    });\n  }),\n  //actions\n  toggleIsLoading: action(state => {\n    state.isLoading = !state.isLoading;\n  }),\n  updateRequestResponse: action((state, payload) => {\n    state.requestResponse = payload;\n  }),\n  clearResponse: action(state => {\n    state.requestResponse = null;\n  }),\n  loginSuccess: action(state => {\n    state.isAuthed = true;\n  }),\n  logoutSuccess: action(state => {\n    state.isAuthed = false;\n  })\n};\nexport default authModel;","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/projects/React/space-repetition/src/Store/models/authModel.js"],"names":["action","thunk","LoginService","RegisterService","EmailConfirmationService","ResendEmailService","ForgotPasswordService","ChangePasswordService","LogoutService","item","sessionItem","authModel","requestResponse","isLoading","isAuthed","login","Actions","loginData","toggleIsLoading","data","then","status","localStorage","removeItem","sessionStorage","newPayload","type","msg","message","updateRequestResponse","loginSuccess","user","isVerified","history","push","payload","error","logout","setItem","token","JSON","stringify","logoutSuccess","register","registerData","password","confirmPassword","confirmEmail","resendToken","forgotPassword","forgotData","email","console","log","changePassword","changePasswordData","state","clearResponse"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,KAAjB,QAA8B,YAA9B;AACA,SAAQC,YAAR,EAAsBC,eAAtB,EACQC,wBADR,EACkCC,kBADlC,EAEQC,qBAFR,EAE+BC,qBAF/B,EAEsDC,aAFtD,QAGO,yBAHP;AAIA,SAAQC,IAAR,EAAaC,WAAb,QAA+B,kBAA/B;AAEA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,eAAe,EAAE,IADD;AAEhBC,EAAAA,SAAS,EAAE,KAFK;AAGhBC,EAAAA,QAAQ,EAAE,IAHM;AAKhBC,EAAAA,KAAK,EAAEd,KAAK,CAAC,CAACe,OAAD,EAAUC,SAAV,KAAwB;AACnCD,IAAAA,OAAO,CAACE,eAAR;AACAhB,IAAAA,YAAY,CAACe,SAAS,CAACE,IAAX,CAAZ,CACGC,IADH,CACSD,IAAD,IAAU;AACd,UAAIA,IAAI,CAACE,MAAT,EAAiB;AACfC,QAAAA,YAAY,CAACC,UAAb,CAAwBd,IAAxB;AACAe,QAAAA,cAAc,CAACD,UAAf,CAA0Bb,WAA1B;AACA,cAAMe,UAAU,GAAG;AACjBC,UAAAA,IAAI,EAAE,SADW;AAEjBC,UAAAA,GAAG,EAAER,IAAI,CAACA,IAAL,CAAUS;AAFE,SAAnB;AAIAZ,QAAAA,OAAO,CAACa,qBAAR,CAA8BJ,UAA9B;AACAT,QAAAA,OAAO,CAACc,YAAR;AACAd,QAAAA,OAAO,CAACE,eAAR;;AACA,YAAGC,IAAI,CAACA,IAAL,CAAUY,IAAV,CAAeC,UAAf,KAA8B,CAAjC,EAAmC;AACjCf,UAAAA,SAAS,CAACgB,OAAV,CAAkBC,IAAlB,CAAuB,uBAAvB;AACD,SAFD,MAEK;AACHjB,UAAAA,SAAS,CAACgB,OAAV,CAAkBC,IAAlB,CAAuB,GAAvB;AACD;AAEF,OAhBD,MAiBM;AACF,cAAMC,OAAO,GAAG;AACZT,UAAAA,IAAI,EAAE,OADM;AAEZC,UAAAA,GAAG,EAACR,IAAI,CAACiB;AAFG,SAAhB;AAIApB,QAAAA,OAAO,CAACa,qBAAR,CAA8BM,OAA9B;AACAnB,QAAAA,OAAO,CAACE,eAAR;AACH;AACF,KA3BH;AA4BD,GA9BW,CALI;AAqChBmB,EAAAA,MAAM,EAAEpC,KAAK,CAAC,CAACe,OAAD,EAASiB,OAAT,KAAqB;AACjCjB,IAAAA,OAAO,CAACE,eAAR;AACAV,IAAAA,aAAa,GACVY,IADH,CACSD,IAAD,IAAU;AACd,UAAIA,IAAI,CAACE,MAAT,EAAiB;AACfC,QAAAA,YAAY,CAACgB,OAAb,CAAqB7B,IAArB,EAA0BU,IAAI,CAACA,IAAL,CAAUoB,KAApC;AACAf,QAAAA,cAAc,CAACc,OAAf,CAAuB5B,WAAvB,EAAmC8B,IAAI,CAACC,SAAL,CAAetB,IAAI,CAACA,IAAL,CAAUY,IAAzB,CAAnC;AACA,cAAMN,UAAU,GAAG;AACjBC,UAAAA,IAAI,EAAE,SADW;AAEjBC,UAAAA,GAAG,EAAER,IAAI,CAACA,IAAL,CAAUS;AAFE,SAAnB;AAIAZ,QAAAA,OAAO,CAACa,qBAAR,CAA8BJ,UAA9B;AACAT,QAAAA,OAAO,CAAC0B,aAAR;AACA1B,QAAAA,OAAO,CAACE,eAAR;AACAe,QAAAA,OAAO,CAACC,IAAR,CAAa,QAAb;AACD,OAXD,MAYM;AACF,cAAMC,OAAO,GAAG;AACZT,UAAAA,IAAI,EAAE,OADM;AAEZC,UAAAA,GAAG,EAACR,IAAI,CAACiB;AAFG,SAAhB;AAIApB,QAAAA,OAAO,CAACa,qBAAR,CAA8BM,OAA9B;AACAnB,QAAAA,OAAO,CAACE,eAAR;AACH;AACF,KAtBH;AAuBD,GAzBY,CArCG;AAgEhByB,EAAAA,QAAQ,EAAE1C,KAAK,CAAC,CAACe,OAAD,EAAU4B,YAAV,KAA2B;AACzC5B,IAAAA,OAAO,CAACE,eAAR;;AACA,QAAI0B,YAAY,CAACzB,IAAb,CAAkB0B,QAAlB,KAA+BD,YAAY,CAACzB,IAAb,CAAkB2B,eAArD,EAAsE;AAClE,YAAMX,OAAO,GAAG;AACdT,QAAAA,IAAI,EAAE,OADQ;AAEdC,QAAAA,GAAG,EAAE;AAFS,OAAhB;AAIAX,MAAAA,OAAO,CAACa,qBAAR,CAA8BM,OAA9B;AACAnB,MAAAA,OAAO,CAACE,eAAR;AACA;AACH;;AACDf,IAAAA,eAAe,CAACyC,YAAY,CAACzB,IAAd,CAAf,CACCC,IADD,CACOD,IAAD,IAAS;AACX,UAAIA,IAAI,CAACE,MAAT,EAAiB;AACf,cAAMc,OAAO,GAAG;AACdT,UAAAA,IAAI,EAAE,SADQ;AAEdC,UAAAA,GAAG,EAAER,IAAI,CAACA,IAAL,CAAUS;AAFD,SAAhB;AAIAZ,QAAAA,OAAO,CAACa,qBAAR,CAA8BM,OAA9B;AACAnB,QAAAA,OAAO,CAACE,eAAR;AACA0B,QAAAA,YAAY,CAACX,OAAb,CAAqBC,IAArB,CAA0B,oCAA1B;AACD,OARD,MASM;AACJ,cAAMC,OAAO,GAAG;AACdT,UAAAA,IAAI,EAAE,OADQ;AAEdC,UAAAA,GAAG,EAAER,IAAI,CAACiB;AAFI,SAAhB;AAIApB,QAAAA,OAAO,CAACa,qBAAR,CAA8BM,OAA9B;AACAnB,QAAAA,OAAO,CAACE,eAAR;AACD;AACJ,KAnBD;AAoBD,GA/Bc,CAhEC;AAiGhB6B,EAAAA,YAAY,EAAE9C,KAAK,CAAC,CAACe,OAAD,EAAUuB,KAAV,KAAoB;AACtCvB,IAAAA,OAAO,CAACE,eAAR;;AACA,QAAIqB,KAAK,KAAI,EAAb,EAAgB;AACZ,YAAMJ,OAAO,GAAG;AACdT,QAAAA,IAAI,EAAE,OADQ;AAEdC,QAAAA,GAAG,EAAE;AAFS,OAAhB;AAIAX,MAAAA,OAAO,CAACa,qBAAR,CAA8BM,OAA9B;AACAnB,MAAAA,OAAO,CAACE,eAAR;AACA;AACH;;AACDd,IAAAA,wBAAwB,CAACmC,KAAD,CAAxB,CACCnB,IADD,CACOD,IAAD,IAAS;AACX,UAAIA,IAAI,CAACE,MAAT,EAAiB;AACf,cAAMc,OAAO,GAAG;AACdT,UAAAA,IAAI,EAAE,SADQ;AAEdC,UAAAA,GAAG,EAAER,IAAI,CAACA,IAAL,CAAUS;AAFD,SAAhB;AAIAZ,QAAAA,OAAO,CAACa,qBAAR,CAA8BM,OAA9B;AACAnB,QAAAA,OAAO,CAACE,eAAR;AACD,OAPD,MAQM;AACJ,cAAMiB,OAAO,GAAG;AACdT,UAAAA,IAAI,EAAE,OADQ;AAEdC,UAAAA,GAAG,EAAER,IAAI,CAACiB;AAFI,SAAhB;AAIApB,QAAAA,OAAO,CAACa,qBAAR,CAA8BM,OAA9B;AACAnB,QAAAA,OAAO,CAACE,eAAR;AACD;AACJ,KAlBD;AAmBD,GA9BkB,CAjGH;AAgIhB8B,EAAAA,WAAW,EAAE/C,KAAK,CAAC,CAACe,OAAD,EAAUuB,KAAV,KAAoB;AACrCvB,IAAAA,OAAO,CAACE,eAAR;;AACA,QAAIqB,KAAK,KAAI,EAAb,EAAgB;AACZ,YAAMJ,OAAO,GAAG;AACdT,QAAAA,IAAI,EAAE,OADQ;AAEdC,QAAAA,GAAG,EAAE;AAFS,OAAhB;AAIAX,MAAAA,OAAO,CAACa,qBAAR,CAA8BM,OAA9B;AACAnB,MAAAA,OAAO,CAACE,eAAR;AACA;AACH;;AACDb,IAAAA,kBAAkB,CAACkC,KAAD,CAAlB,CACCnB,IADD,CACOD,IAAD,IAAS;AACX,UAAIA,IAAI,CAACE,MAAT,EAAiB;AACf,cAAMc,OAAO,GAAG;AACdT,UAAAA,IAAI,EAAE,SADQ;AAEdC,UAAAA,GAAG,EAAER,IAAI,CAACA,IAAL,CAAUS;AAFD,SAAhB;AAIAZ,QAAAA,OAAO,CAACa,qBAAR,CAA8BM,OAA9B;AACAnB,QAAAA,OAAO,CAACE,eAAR;AACD,OAPD,MAQM;AACJ,cAAMiB,OAAO,GAAG;AACdT,UAAAA,IAAI,EAAE,OADQ;AAEdC,UAAAA,GAAG,EAAER,IAAI,CAACiB;AAFI,SAAhB;AAIApB,QAAAA,OAAO,CAACa,qBAAR,CAA8BM,OAA9B;AACAnB,QAAAA,OAAO,CAACE,eAAR;AACD;AACJ,KAlBD;AAmBD,GA9BiB,CAhIF;AA+JhB+B,EAAAA,cAAc,EAAEhD,KAAK,CAAC,CAACe,OAAD,EAAUkC,UAAV,KAAyB;AAC7ClC,IAAAA,OAAO,CAACE,eAAR;;AACA,QAAIgC,UAAU,CAAC/B,IAAX,CAAgBgC,KAAhB,KAAyB,EAA7B,EAAgC;AAC5B,YAAMhB,OAAO,GAAG;AACdT,QAAAA,IAAI,EAAE,OADQ;AAEdC,QAAAA,GAAG,EAAE;AAFS,OAAhB;AAIAX,MAAAA,OAAO,CAACa,qBAAR,CAA8BM,OAA9B;AACAnB,MAAAA,OAAO,CAACE,eAAR;AACA;AACH;;AACDZ,IAAAA,qBAAqB,CAAC4C,UAAU,CAAC/B,IAAZ,CAArB,CACCC,IADD,CACOD,IAAD,IAAS;AACX,UAAIA,IAAI,CAACE,MAAT,EAAiB;AACf+B,QAAAA,OAAO,CAACC,GAAR,CAAYlC,IAAZ;AACA,cAAMgB,OAAO,GAAG;AACdT,UAAAA,IAAI,EAAE,SADQ;AAEdC,UAAAA,GAAG,EAAER,IAAI,CAACA,IAAL,CAAUS;AAFD,SAAhB;AAIAZ,QAAAA,OAAO,CAACa,qBAAR,CAA8BM,OAA9B;AACAnB,QAAAA,OAAO,CAACE,eAAR;AACD,OARD,MASM;AACJ,cAAMiB,OAAO,GAAG;AACdT,UAAAA,IAAI,EAAE,OADQ;AAEdC,UAAAA,GAAG,EAAER,IAAI,CAACiB;AAFI,SAAhB;AAIApB,QAAAA,OAAO,CAACa,qBAAR,CAA8BM,OAA9B;AACAnB,QAAAA,OAAO,CAACE,eAAR;AACD;AACJ,KAnBD;AAoBD,GA/BoB,CA/JL;AAgMhBoC,EAAAA,cAAc,EAAErD,KAAK,CAAC,CAACe,OAAD,EAAUuC,kBAAV,KAAiC;AACrDvC,IAAAA,OAAO,CAACE,eAAR;;AACA,QAAIqC,kBAAkB,CAACpC,IAAnB,CAAwB0B,QAAxB,KAAoC,EAApC,IAA0CU,kBAAkB,CAACpC,IAAnB,CAAwB0B,QAAxB,KAAqCU,kBAAkB,CAACpC,IAAnB,CAAwB2B,eAAvG,IAA0HS,kBAAkB,CAACpC,IAAnB,CAAwBoB,KAAxB,KAAiC,EAA/J,EAAkK;AAC9J,YAAMJ,OAAO,GAAG;AACdT,QAAAA,IAAI,EAAE,OADQ;AAEdC,QAAAA,GAAG,EAAE;AAFS,OAAhB;AAIAX,MAAAA,OAAO,CAACa,qBAAR,CAA8BM,OAA9B;AACAnB,MAAAA,OAAO,CAACE,eAAR;AACA;AACH;;AACDX,IAAAA,qBAAqB,CAACgD,kBAAkB,CAACpC,IAApB,CAArB,CACCC,IADD,CACOD,IAAD,IAAS;AACX,UAAIA,IAAI,CAACE,MAAT,EAAiB;AACf,cAAMc,OAAO,GAAG;AACdT,UAAAA,IAAI,EAAE,SADQ;AAEdC,UAAAA,GAAG,EAAER,IAAI,CAACA,IAAL,CAAUS;AAFD,SAAhB;AAIAZ,QAAAA,OAAO,CAACa,qBAAR,CAA8BM,OAA9B;AACAnB,QAAAA,OAAO,CAACE,eAAR;AACAqC,QAAAA,kBAAkB,CAACtB,OAAnB,CAA2BC,IAA3B,CAAgC,QAAhC;AACD,OARD,MASK;AACH,cAAMC,OAAO,GAAG;AACdT,UAAAA,IAAI,EAAE,OADQ;AAEdC,UAAAA,GAAG,EAAER,IAAI,CAACiB;AAFI,SAAhB;AAIApB,QAAAA,OAAO,CAACa,qBAAR,CAA8BM,OAA9B;AACAnB,QAAAA,OAAO,CAACE,eAAR;AACD;AACJ,KAnBD;AAoBD,GA/BoB,CAhML;AAiOhB;AACAA,EAAAA,eAAe,EAAElB,MAAM,CAAEwD,KAAD,IAAW;AACjCA,IAAAA,KAAK,CAAC3C,SAAN,GAAkB,CAAC2C,KAAK,CAAC3C,SAAzB;AACD,GAFsB,CAlOP;AAsOhBgB,EAAAA,qBAAqB,EAAE7B,MAAM,CAAC,CAACwD,KAAD,EAAQrB,OAAR,KAAoB;AAChDqB,IAAAA,KAAK,CAAC5C,eAAN,GAAwBuB,OAAxB;AACD,GAF4B,CAtOb;AA0OhBsB,EAAAA,aAAa,EAAEzD,MAAM,CAAEwD,KAAD,IAAW;AAC/BA,IAAAA,KAAK,CAAC5C,eAAN,GAAwB,IAAxB;AACD,GAFoB,CA1OL;AA8OhBkB,EAAAA,YAAY,EAAE9B,MAAM,CAAEwD,KAAD,IAAU;AAC3BA,IAAAA,KAAK,CAAC1C,QAAN,GAAiB,IAAjB;AACH,GAFmB,CA9OJ;AAiPhB4B,EAAAA,aAAa,EAAE1C,MAAM,CAAEwD,KAAD,IAAU;AAC5BA,IAAAA,KAAK,CAAC1C,QAAN,GAAiB,KAAjB;AACH,GAFoB;AAjPL,CAAlB;AAsPA,eAAeH,SAAf","sourcesContent":["import { action, thunk } from \"easy-peasy\";\nimport {LoginService, RegisterService, \n        EmailConfirmationService, ResendEmailService,\n        ForgotPasswordService, ChangePasswordService, LogoutService\n} from '../services/authService'\nimport {item,sessionItem} from '../configs/index'\n\nconst authModel = {\n  requestResponse: null,\n  isLoading: false,\n  isAuthed: true,\n\n  login: thunk((Actions, loginData) => {\n    Actions.toggleIsLoading();\n    LoginService(loginData.data)\n      .then((data) => {\n        if (data.status) {\n          localStorage.removeItem(item)\n          sessionStorage.removeItem(sessionItem)\n          const newPayload = {\n            type: \"success\",\n            msg: data.data.message,\n          };\n          Actions.updateRequestResponse(newPayload)\n          Actions.loginSuccess()\n          Actions.toggleIsLoading();  \n          if(data.data.user.isVerified === 0){\n            loginData.history.push(\"/account-verification\") \n          }else{\n            loginData.history.push(\"/\") \n          }\n                \n        }\n         else {\n            const payload = {\n                type: 'error',\n                msg:data.error\n            }\n            Actions.updateRequestResponse(payload);\n            Actions.toggleIsLoading();\n        }\n      })\n  }),\n\n  logout: thunk((Actions,history) => {\n    Actions.toggleIsLoading();\n    LogoutService()\n      .then((data) => {\n        if (data.status) {\n          localStorage.setItem(item,data.data.token)\n          sessionStorage.setItem(sessionItem,JSON.stringify(data.data.user))\n          const newPayload = {\n            type: \"success\",\n            msg: data.data.message,\n          };\n          Actions.updateRequestResponse(newPayload)\n          Actions.logoutSuccess()\n          Actions.toggleIsLoading();          \n          history.push(\"/login\")                 \n        }\n         else {\n            const payload = {\n                type: 'error',\n                msg:data.error\n            }\n            Actions.updateRequestResponse(payload);\n            Actions.toggleIsLoading();\n        }\n      })\n  }),\n\n  register: thunk((Actions, registerData) => {\n    Actions.toggleIsLoading();\n    if (registerData.data.password !== registerData.data.confirmPassword) {\n        const payload = {\n          type: \"error\",\n          msg: \"Passwords do not match\",\n        };\n        Actions.updateRequestResponse(payload);\n        Actions.toggleIsLoading();\n        return\n    }\n    RegisterService(registerData.data)\n    .then((data) =>{\n        if (data.status) {\n          const payload = {\n            type: \"success\",\n            msg: data.data.message,\n          };\n          Actions.updateRequestResponse(payload);\n          Actions.toggleIsLoading();\n          registerData.history.push(\"/registration-success-notification\");\n        }\n         else {\n          const payload = {\n            type: \"error\",\n            msg: data.error,\n          };\n          Actions.updateRequestResponse(payload);\n          Actions.toggleIsLoading();\n        }\n    })\n  }),\n\n  confirmEmail: thunk((Actions, token) => {\n    Actions.toggleIsLoading();\n    if (token ===''){\n        const payload = {\n          type: \"error\",\n          msg: \"Invalid Token\",\n        };\n        Actions.updateRequestResponse(payload);\n        Actions.toggleIsLoading();\n        return\n    }\n    EmailConfirmationService(token)\n    .then((data) =>{\n        if (data.status) {\n          const payload = {\n            type: \"success\",\n            msg: data.data.message,\n          };\n          Actions.updateRequestResponse(payload);\n          Actions.toggleIsLoading();\n        }\n         else {\n          const payload = {\n            type: \"error\",\n            msg: data.error,\n          };\n          Actions.updateRequestResponse(payload);\n          Actions.toggleIsLoading();\n        }\n    })\n  }),\n  resendToken: thunk((Actions, token) => {\n    Actions.toggleIsLoading();\n    if (token ===''){\n        const payload = {\n          type: \"error\",\n          msg: \"Invalid Token\",\n        };\n        Actions.updateRequestResponse(payload);\n        Actions.toggleIsLoading();\n        return\n    }\n    ResendEmailService(token)\n    .then((data) =>{\n        if (data.status) {\n          const payload = {\n            type: \"success\",\n            msg: data.data.message,\n          };\n          Actions.updateRequestResponse(payload);\n          Actions.toggleIsLoading();\n        }\n         else {\n          const payload = {\n            type: \"error\",\n            msg: data.error,\n          };\n          Actions.updateRequestResponse(payload);\n          Actions.toggleIsLoading();\n        }\n    })\n  }),\n  forgotPassword: thunk((Actions, forgotData) => {\n    Actions.toggleIsLoading();\n    if (forgotData.data.email ===''){\n        const payload = {\n          type: \"error\",\n          msg: \"Email Field Must be Filled\",\n        };\n        Actions.updateRequestResponse(payload);\n        Actions.toggleIsLoading();\n        return\n    }\n    ForgotPasswordService(forgotData.data)\n    .then((data) =>{\n        if (data.status) {\n          console.log(data)\n          const payload = {\n            type: \"success\",\n            msg: data.data.message,\n          };\n          Actions.updateRequestResponse(payload);\n          Actions.toggleIsLoading();\n        }\n         else {\n          const payload = {\n            type: \"error\",\n            msg: data.error,\n          };\n          Actions.updateRequestResponse(payload);\n          Actions.toggleIsLoading();\n        }\n    })\n  }),\n\n  changePassword: thunk((Actions, changePasswordData) => {\n    Actions.toggleIsLoading();\n    if (changePasswordData.data.password ==='' || changePasswordData.data.password !== changePasswordData.data.confirmPassword || changePasswordData.data.token ===''){\n        const payload = {\n          type: \"error\",\n          msg: \"Kindly Ensure all Fields are Correctly Filled\",\n        };\n        Actions.updateRequestResponse(payload);\n        Actions.toggleIsLoading();\n        return\n    }\n    ChangePasswordService(changePasswordData.data)\n    .then((data) =>{\n        if (data.status) {\n          const payload = {\n            type: \"success\",\n            msg: data.data.message,\n          };\n          Actions.updateRequestResponse(payload);\n          Actions.toggleIsLoading();\n          changePasswordData.history.push('/login')\n        }\n        else {\n          const payload = {\n            type: \"error\",\n            msg: data.error,\n          };\n          Actions.updateRequestResponse(payload);\n          Actions.toggleIsLoading();\n        }\n    })\n  }),\n\n  //actions\n  toggleIsLoading: action((state) => {\n    state.isLoading = !state.isLoading;\n  }),\n\n  updateRequestResponse: action((state, payload) => {\n    state.requestResponse = payload;\n  }),\n\n  clearResponse: action((state) => {\n    state.requestResponse = null;\n  }),\n\n  loginSuccess: action((state)=> {\n      state.isAuthed = true;\n  }),\n  logoutSuccess: action((state)=> {\n      state.isAuthed = false;\n  })\n};\n\nexport default authModel"]},"metadata":{},"sourceType":"module"}