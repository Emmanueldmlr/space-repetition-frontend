{"ast":null,"code":"import { action, thunk } from \"easy-peasy\";\nimport { LoginService, RegisterService } from '../services/authService';\nimport { item } from '../configs/index';\nconst authModel = {\n  user: null,\n  requestResponse: null,\n  isLoading: false,\n  isAuthed: true,\n  login: thunk((Actions, loginData) => {\n    Actions.toggleIsLoading();\n    LoginService(loginData.data).then(data => {\n      if (data.status) {\n        localStorage.setItem(item, data.data.token);\n        const newPayload = {\n          type: \"success\",\n          msg: data.data.message\n        };\n        Actions.updateRequestResponse(newPayload);\n        Actions.loginSuccess(data);\n        Actions.toggleIsLoading();\n        console.log(\"its here\");\n        loginData.history.push(\"/\");\n      } else {\n        const payload = {\n          type: 'error',\n          msg: data.error\n        };\n        Actions.updateRequestResponse(payload);\n        Actions.toggleIsLoading();\n      }\n    });\n  }),\n  register: thunk((Actions, registerData) => {\n    Actions.toggleIsLoading();\n\n    if (registerData.data.password !== registerData.data.confirmPassword) {\n      const payload = {\n        type: \"error\",\n        msg: \"Passwords do not match\"\n      };\n      Actions.updateRequestResponse(payload);\n      Actions.toggleIsLoading();\n      return;\n    }\n\n    RegisterService(registerData.data).then(data => {\n      if (data.status) {\n        const payload = {\n          type: \"success\",\n          msg: data.data.message\n        };\n        Actions.updateRequestResponse(payload);\n        Actions.toggleIsLoading();\n        registerData.history.push(\"/registration-success-notification\");\n      } else {\n        const payload = {\n          type: \"error\",\n          msg: data.error\n        };\n        Actions.updateRequestResponse(payload);\n        Actions.toggleIsLoading();\n      }\n    });\n  }),\n  //actions\n  toggleIsLoading: action(state => {\n    state.isLoading = !state.isLoading;\n  }),\n  updateRequestResponse: action((state, payload) => {\n    console.log(payload);\n    state.requestResponse = payload;\n  }),\n  clearResponse: action(state => {\n    state.requestResponse = null;\n  }),\n  loginSuccess: action((state, payload) => {\n    state.user = payload.user;\n    state.isAuthed = true;\n  })\n};\nexport default authModel;","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/projects/React/space-repetition/src/Store/models/authModel.js"],"names":["action","thunk","LoginService","RegisterService","item","authModel","user","requestResponse","isLoading","isAuthed","login","Actions","loginData","toggleIsLoading","data","then","status","localStorage","setItem","token","newPayload","type","msg","message","updateRequestResponse","loginSuccess","console","log","history","push","payload","error","register","registerData","password","confirmPassword","state","clearResponse"],"mappings":"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","sourcesContent":["import { action, thunk } from \"easy-peasy\";\nimport {LoginService, RegisterService} from '../services/authService'\nimport {item} from '../configs/index'\n\nconst authModel = {\n  user: null,\n  requestResponse: null,\n  isLoading: false,\n  isAuthed: true,\n\n  login: thunk((Actions, loginData) => {\n    Actions.toggleIsLoading();\n    LoginService(loginData.data)\n      .then((data) => {\n        if (data.status) {\n          localStorage.setItem(item,data.data.token)\n          const newPayload = {\n            type: \"success\",\n            msg: data.data.message,\n          };\n          Actions.updateRequestResponse(newPayload)\n          Actions.loginSuccess(data)\n          Actions.toggleIsLoading();  \n          console.log(\"its here\") \n          loginData.history.push(\"/\") \n           \n        }\n         else {\n            const payload = {\n                type: 'error',\n                msg:data.error\n            }\n            Actions.updateRequestResponse(payload);\n            Actions.toggleIsLoading();\n        }\n      })\n  }),\n\n  register: thunk((Actions, registerData) => {\n    Actions.toggleIsLoading();\n    if (registerData.data.password !== registerData.data.confirmPassword) {\n        const payload = {\n          type: \"error\",\n          msg: \"Passwords do not match\",\n        };\n        Actions.updateRequestResponse(payload);\n        Actions.toggleIsLoading();\n        return\n    }\n    RegisterService(registerData.data)\n    .then((data) =>{\n        if (data.status) {\n          const payload = {\n            type: \"success\",\n            msg: data.data.message,\n          };\n          Actions.updateRequestResponse(payload);\n          Actions.toggleIsLoading();\n          registerData.history.push(\"/registration-success-notification\");\n        }\n         else {\n          const payload = {\n            type: \"error\",\n            msg: data.error,\n          };\n          Actions.updateRequestResponse(payload);\n          Actions.toggleIsLoading();\n        }\n    })\n  }),\n\n  //actions\n  toggleIsLoading: action((state) => {\n    state.isLoading = !state.isLoading;\n  }),\n\n  updateRequestResponse: action((state, payload) => {\n    console.log(payload);\n    state.requestResponse = payload;\n  }),\n\n  clearResponse: action((state) => {\n    state.requestResponse = null;\n  }),\n\n  loginSuccess: action((state,payload)=> {\n      state.user = payload.user;\n      state.isAuthed = true;\n  })\n};\n\nexport default authModel"]},"metadata":{},"sourceType":"module"}