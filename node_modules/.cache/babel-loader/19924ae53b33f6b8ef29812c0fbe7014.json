{"ast":null,"code":"import { action, thunk } from \"easy-peasy\";\nimport { FetchTodoService, UpdateTodoService, DeleteTodoService, CreateTodoService } from '../services/todoService';\nimport { item, sessionItem } from '../configs/index';\nconst todoModel = {\n  todos: [],\n  cards: [{\n    title: \"Learn Hooks\",\n    body: \"Hooks are used in a functional components and work just like the life cycle methods in a class component\",\n    tags: ['React', 'Hooks']\n  }, {\n    title: \"Learn PHP\",\n    body: \"PHP is a backend language for web\",\n    tags: ['PHP', 'Backend']\n  }],\n  isLoading: false,\n  requestResponse: null,\n  fetchTodos: thunk((Actions, nill, helpers) => {\n    const authActions = helpers.getStoreActions(Action => Action);\n    Actions.toggleIsLoading();\n    FetchTodoService().then(data => {\n      if (data.status === 200) {\n        Actions.fetchSuccess(data.data.todos);\n        Actions.toggleIsLoading();\n        return;\n      } else if (data.status === 401) {\n        localStorage.removeItem(item);\n        sessionStorage.removeItem(sessionItem);\n        authActions.auth.logout();\n        return;\n      } else {\n        const payload = {\n          type: \"error\",\n          msg: data.error\n        };\n        Actions.updateRequestResponse(payload);\n        Actions.toggleIsLoading();\n      }\n    });\n  }),\n  updateTodos: thunk((Actions, payload, helpers) => {\n    const authActions = helpers.getStoreActions(Action => Action);\n    Actions.toggleIsLoading();\n    UpdateTodoService(payload).then(data => {\n      if (data.status === 200) {\n        Actions.fetchSuccess(data.data.todo);\n        Actions.toggleIsLoading();\n        return;\n      } else if (data.status === 401) {\n        localStorage.removeItem(item);\n        sessionStorage.removeItem(sessionItem);\n        authActions.auth.logout();\n        return;\n      } else {\n        const payload = {\n          type: \"error\",\n          msg: data.error\n        };\n        Actions.updateRequestResponse(payload);\n        Actions.toggleIsLoading();\n      }\n    });\n  }),\n  deleteTodo: thunk((Actions, id, helpers) => {\n    const authActions = helpers.getStoreActions(Action => Action);\n    Actions.toggleIsLoading();\n    DeleteTodoService(id).then(data => {\n      if (data.status === 200) {\n        Actions.fetchSuccess(data.data.todo);\n        Actions.toggleIsLoading();\n      } else if (data.status === 401) {\n        localStorage.removeItem(item);\n        sessionStorage.removeItem(sessionItem);\n        authActions.auth.logout();\n      } else {\n        const payload = {\n          type: \"error\",\n          msg: data.error\n        };\n        Actions.updateRequestResponse(payload);\n        Actions.toggleIsLoading();\n      }\n    });\n  }),\n  addTodo: thunk((Actions, formData, helpers) => {\n    Actions.toggleIsLoading();\n    const authActions = helpers.getStoreActions(Action => Action);\n\n    if (formData.title === '') {\n      const payload = {\n        type: \"error\",\n        msg: \"Title Field is Required\"\n      };\n      Actions.updateRequestResponse(payload);\n      Actions.toggleIsLoading();\n      return;\n    }\n\n    if (formData.subTodo.length < 1) {\n      const payload = {\n        type: \"error\",\n        msg: \"You need at Least One Todo to Submit Form\"\n      };\n      Actions.updateRequestResponse(payload);\n      Actions.toggleIsLoading();\n      return;\n    }\n\n    CreateTodoService(formData).then(data => {\n      if (data.status === 200) {\n        Actions.fetchSuccess(data.data.todo);\n        const payload = {\n          type: \"success\",\n          msg: data.data.message\n        };\n        Actions.updateRequestResponse(payload);\n        Actions.toggleIsLoading();\n      } else if (data.status === 401) {\n        localStorage.removeItem(item);\n        sessionStorage.removeItem(sessionItem);\n        authActions.auth.logout();\n      } else {\n        const payload = {\n          type: \"error\",\n          msg: data.error\n        };\n        Actions.updateRequestResponse(payload);\n        Actions.toggleIsLoading();\n      }\n    });\n  }),\n  //actions\n  toggleIsLoading: action(state => {\n    state.isLoading = !state.isLoading;\n  }),\n  updateRequestResponse: action((state, payload) => {\n    state.requestResponse = payload;\n  }),\n  clearResponse: action(state => {\n    state.requestResponse = null;\n  }),\n  fetchSuccess: action((state, payload) => {\n    state.todos = payload;\n  })\n};\nexport default todoModel;","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/projects/React/space-repetition/src/Store/models/todoModel.js"],"names":["action","thunk","FetchTodoService","UpdateTodoService","DeleteTodoService","CreateTodoService","item","sessionItem","todoModel","todos","cards","title","body","tags","isLoading","requestResponse","fetchTodos","Actions","nill","helpers","authActions","getStoreActions","Action","toggleIsLoading","then","data","status","fetchSuccess","localStorage","removeItem","sessionStorage","auth","logout","payload","type","msg","error","updateRequestResponse","updateTodos","todo","deleteTodo","id","addTodo","formData","subTodo","length","message","state","clearResponse"],"mappings":"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","sourcesContent":["import { action, thunk } from \"easy-peasy\";\nimport {FetchTodoService, UpdateTodoService, DeleteTodoService, CreateTodoService\n} from '../services/todoService'\nimport {item,sessionItem} from '../configs/index'\nconst todoModel = {\n    todos:[],\n    cards: [\n        {\n            title: \"Learn Hooks\",\n            body: \"Hooks are used in a functional components and work just like the life cycle methods in a class component\",\n            tags: [ 'React', 'Hooks']\n        },\n        {\n            title: \"Learn PHP\",\n            body: \"PHP is a backend language for web\",\n            tags: [ 'PHP', 'Backend']\n        }\n    ],\n    isLoading: false,\n    requestResponse:null,\n\n    fetchTodos: thunk((Actions, nill,helpers) => {\n        const authActions = helpers.getStoreActions(Action => Action)\n        Actions.toggleIsLoading();\n        FetchTodoService()\n          .then((data) => {\n            if(data.status === 200){\n                Actions.fetchSuccess(data.data.todos)\n                Actions.toggleIsLoading(); \n                return\n            }\n            else if(data.status === 401){\n                localStorage.removeItem(item)\n                sessionStorage.removeItem(sessionItem)\n                authActions.auth.logout()\n                return\n            }\n            else{\n                const payload = {\n                type: \"error\",\n                msg: data.error,\n                };\n                Actions.updateRequestResponse(payload);\n                Actions.toggleIsLoading(); \n            }\n          })\n      }),\n\n    updateTodos: thunk((Actions, payload,helpers) => {\n        const authActions = helpers.getStoreActions(Action => Action)\n        Actions.toggleIsLoading();\n        UpdateTodoService(payload)\n          .then((data) => {\n            if(data.status === 200){\n                Actions.fetchSuccess(data.data.todo)\n                Actions.toggleIsLoading(); \n                return\n            }\n            else if(data.status === 401){\n                localStorage.removeItem(item)\n                sessionStorage.removeItem(sessionItem)\n                authActions.auth.logout()\n                return\n            }\n            else{\n                const payload = {\n                type: \"error\",\n                msg: data.error,\n                };\n                Actions.updateRequestResponse(payload);\n                Actions.toggleIsLoading(); \n            }\n          })\n      }),\n\n    deleteTodo: thunk((Actions, id,helpers) => {\n        const authActions = helpers.getStoreActions(Action => Action)\n        Actions.toggleIsLoading();\n        DeleteTodoService(id)\n          .then((data) => {\n            if(data.status === 200){\n                Actions.fetchSuccess(data.data.todo)\n                Actions.toggleIsLoading(); \n            \n            }\n            else if(data.status === 401){\n                localStorage.removeItem(item)\n                sessionStorage.removeItem(sessionItem)\n                authActions.auth.logout()\n            \n            }\n            else{\n                const payload = {\n                type: \"error\",\n                msg: data.error,\n                };\n                Actions.updateRequestResponse(payload);\n                Actions.toggleIsLoading(); \n            }\n          })\n      }),\n\n    addTodo: thunk((Actions, formData,helpers) => {\n        Actions.toggleIsLoading();\n        const authActions = helpers.getStoreActions(Action => Action)\n        if(formData.title ===''){\n            const payload = {\n                type: \"error\",\n                msg: \"Title Field is Required\",\n            };\n            Actions.updateRequestResponse(payload);\n            Actions.toggleIsLoading();\n            return\n        }\n        if(formData.subTodo.length < 1){\n            const payload = {\n                type: \"error\",\n                msg: \"You need at Least One Todo to Submit Form\",\n            };\n            Actions.updateRequestResponse(payload);\n            Actions.toggleIsLoading();\n            return\n        }\n\n        CreateTodoService(formData)\n          .then((data) => {\n            if(data.status === 200){\n                Actions.fetchSuccess(data.data.todo)\n                const payload = {\n                    type: \"success\",\n                    msg: data.data.message,\n                };\n                Actions.updateRequestResponse(payload);\n                Actions.toggleIsLoading(); \n             \n            }\n            else if(data.status === 401){\n                localStorage.removeItem(item)\n                sessionStorage.removeItem(sessionItem)\n                authActions.auth.logout()\n               \n            }\n            else{\n                const payload = {\n                type: \"error\",\n                msg: data.error,\n                };\n                Actions.updateRequestResponse(payload);\n                Actions.toggleIsLoading(); \n            }\n        })\n      }),\n   \n\n        //actions\n    toggleIsLoading: action((state) => {\n        state.isLoading = !state.isLoading;\n    }),\n\n    updateRequestResponse: action((state, payload) => {\n        state.requestResponse = payload;\n    }),\n\n    clearResponse: action((state) => {\n        state.requestResponse = null;\n    }),\n\n    fetchSuccess: action((state, payload)=> {\n        state.todos = payload;\n    }),\n\n}\n\nexport default todoModel;"]},"metadata":{},"sourceType":"module"}