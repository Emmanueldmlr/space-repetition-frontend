{"ast":null,"code":"import { action, thunk } from \"easy-peasy\";\nimport { FetchTodoService, UpdateTodoService, DeleteTodoService, CreateTodoService } from '../services/todoService';\nimport { item, sessionItem } from '../configs/index';\nconst todoModel = {\n  todos: [],\n  isLoading: false,\n  requestResponse: null,\n  fetchTodos: thunk((Actions, nill, helpers) => {\n    const authActions = helpers.getStoreActions(Action => Action);\n    Actions.toggleIsLoading();\n    FetchTodoService().then(data => {\n      if (data.status === 200) {\n        Actions.fetchSuccess(data.data.todos);\n        Actions.toggleIsLoading();\n      }\n\n      if (data.status === 401) {\n        localStorage.removeItem(item);\n        sessionStorage.removeItem(sessionItem);\n        authActions.auth.logout();\n      }\n    });\n  }),\n  updateTodos: thunk((Actions, payload, helpers) => {\n    const authActions = helpers.getStoreActions(Action => Action);\n    Actions.toggleIsLoading();\n    UpdateTodoService(payload).then(data => {\n      if (data.status === 200) {\n        Actions.fetchSuccess(data.data.todo);\n        Actions.toggleIsLoading();\n      }\n\n      if (data.status === 401) {\n        localStorage.removeItem(item);\n        sessionStorage.removeItem(sessionItem);\n        authActions.auth.logout();\n      }\n    });\n  }),\n  deleteTodo: thunk((Actions, id, helpers) => {\n    const authActions = helpers.getStoreActions(Action => Action);\n    Actions.toggleIsLoading();\n    DeleteTodoService(id).then(data => {\n      if (data.status === 200) {\n        Actions.fetchSuccess(data.data.todo);\n        Actions.toggleIsLoading();\n      }\n\n      if (data.status === 401) {\n        localStorage.removeItem(item);\n        sessionStorage.removeItem(sessionItem);\n        authActions.auth.logout();\n      }\n    });\n  }),\n  addTodo: thunk((Actions, formData, helpers) => {\n    Actions.toggleIsLoading();\n    const authActions = helpers.getStoreActions(Action => Action);\n\n    if (formData.title === '') {\n      const payload = {\n        type: \"error\",\n        msg: \"Title Field is Required\"\n      };\n      Actions.updateRequestResponse(payload);\n      Actions.toggleIsLoading();\n      return;\n    }\n\n    if (formData.subTodo.length < 1) {\n      const payload = {\n        type: \"error\",\n        msg: \"You need at Least One Todo to Submit Form\"\n      };\n      Actions.updateRequestResponse(payload);\n      Actions.toggleIsLoading();\n      return;\n    }\n\n    CreateTodoService(formData).then(data => {\n      if (data.status === 200) {\n        Actions.fetchSuccess(data.data.todo);\n        Actions.toggleIsLoading();\n      }\n\n      if (data.status === 401) {\n        localStorage.removeItem(item);\n        sessionStorage.removeItem(sessionItem);\n        authActions.auth.logout();\n      }\n    });\n  }),\n  //actions\n  toggleIsLoading: action(state => {\n    state.isLoading = !state.isLoading;\n  }),\n  updateRequestResponse: action((state, payload) => {\n    state.requestResponse = payload;\n  }),\n  clearResponse: action(state => {\n    state.requestResponse = null;\n  }),\n  fetchSuccess: action((state, payload) => {\n    state.todos = payload;\n  })\n};\nexport default todoModel;","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/projects/React/space-repetition/src/Store/models/todoModel.js"],"names":["action","thunk","FetchTodoService","UpdateTodoService","DeleteTodoService","CreateTodoService","item","sessionItem","todoModel","todos","isLoading","requestResponse","fetchTodos","Actions","nill","helpers","authActions","getStoreActions","Action","toggleIsLoading","then","data","status","fetchSuccess","localStorage","removeItem","sessionStorage","auth","logout","updateTodos","payload","todo","deleteTodo","id","addTodo","formData","title","type","msg","updateRequestResponse","subTodo","length","state","clearResponse"],"mappings":"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","sourcesContent":["import { action, thunk } from \"easy-peasy\";\nimport {FetchTodoService, UpdateTodoService, DeleteTodoService, CreateTodoService\n} from '../services/todoService'\nimport {item,sessionItem} from '../configs/index'\nconst todoModel = {\n    todos:[],\n    isLoading: false,\n    requestResponse:null,\n\n    fetchTodos: thunk((Actions, nill,helpers) => {\n        const authActions = helpers.getStoreActions(Action => Action)\n        Actions.toggleIsLoading();\n        FetchTodoService()\n          .then((data) => {\n            if(data.status === 200){\n                Actions.fetchSuccess(data.data.todos)\n                Actions.toggleIsLoading(); \n            }\n            if(data.status === 401){\n                localStorage.removeItem(item)\n                sessionStorage.removeItem(sessionItem)\n                authActions.auth.logout()\n            }\n          })\n      }),\n\n    updateTodos: thunk((Actions, payload,helpers) => {\n        const authActions = helpers.getStoreActions(Action => Action)\n        Actions.toggleIsLoading();\n        UpdateTodoService(payload)\n          .then((data) => {\n            if(data.status === 200){\n                Actions.fetchSuccess(data.data.todo)\n                Actions.toggleIsLoading(); \n            }\n            if(data.status === 401){\n                localStorage.removeItem(item)\n                sessionStorage.removeItem(sessionItem)\n                authActions.auth.logout()\n            }\n          })\n      }),\n\n    deleteTodo: thunk((Actions, id,helpers) => {\n        const authActions = helpers.getStoreActions(Action => Action)\n        Actions.toggleIsLoading();\n        DeleteTodoService(id)\n          .then((data) => {\n            if(data.status === 200){\n                Actions.fetchSuccess(data.data.todo)\n                Actions.toggleIsLoading(); \n            }\n            if(data.status === 401){\n                localStorage.removeItem(item)\n                sessionStorage.removeItem(sessionItem)\n                authActions.auth.logout()\n            }\n          })\n      }),\n\n    addTodo: thunk((Actions, formData,helpers) => {\n        Actions.toggleIsLoading();\n        const authActions = helpers.getStoreActions(Action => Action)\n        if(formData.title ===''){\n            const payload = {\n                type: \"error\",\n                msg: \"Title Field is Required\",\n            };\n            Actions.updateRequestResponse(payload);\n            Actions.toggleIsLoading();\n            return\n        }\n        if(formData.subTodo.length < 1){\n            const payload = {\n                type: \"error\",\n                msg: \"You need at Least One Todo to Submit Form\",\n            };\n            Actions.updateRequestResponse(payload);\n            Actions.toggleIsLoading();\n            return\n        }\n\n        CreateTodoService(formData)\n          .then((data) => {\n            if(data.status === 200){\n                Actions.fetchSuccess(data.data.todo)\n                Actions.toggleIsLoading(); \n            }\n            if(data.status === 401){\n                localStorage.removeItem(item)\n                sessionStorage.removeItem(sessionItem)\n                authActions.auth.logout()\n            }\n        })\n      }),\n\n        //actions\n    toggleIsLoading: action((state) => {\n        state.isLoading = !state.isLoading;\n    }),\n\n    updateRequestResponse: action((state, payload) => {\n        state.requestResponse = payload;\n    }),\n\n    clearResponse: action((state) => {\n        state.requestResponse = null;\n    }),\n\n    fetchSuccess: action((state, payload)=> {\n        state.todos = payload;\n    }),\n\n}\n\nexport default todoModel;"]},"metadata":{},"sourceType":"module"}