{"ast":null,"code":"import { action, thunk } from \"easy-peasy\";\nimport { FetchTodoService } from '../services/todoService';\nimport { item, sessionItem } from '../configs/index';\nconst todoModel = {\n  todos: [],\n  isLoading: false,\n  requestResponse: \"\",\n  fetchTodos: thunk(Actions => {\n    Actions.toggleIsLoading();\n    FetchTodoService().then(data => {\n      if (data.status) {\n        console.log(data);\n        const newPayload = {\n          type: \"success\",\n          msg: data.data.message\n        };\n        Actions.updateRequestResponse(newPayload);\n        Actions.toggleIsLoading();\n      } else {\n        const payload = {\n          type: 'error',\n          msg: data.error\n        };\n        Actions.updateRequestResponse(payload);\n        Actions.toggleIsLoading();\n      }\n    });\n  }),\n  //actions\n  toggleIsLoading: action(state => {\n    state.isLoading = !state.isLoading;\n  }),\n  updateRequestResponse: action((state, payload) => {\n    state.requestResponse = payload;\n  }),\n  clearResponse: action(state => {\n    state.requestResponse = null;\n  }),\n  fetchSuccess: action((state, payload) => {\n    state.todos = payload;\n  })\n};\nexport default todoModel;","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/projects/React/space-repetition/src/Store/models/todoModel.js"],"names":["action","thunk","FetchTodoService","item","sessionItem","todoModel","todos","isLoading","requestResponse","fetchTodos","Actions","toggleIsLoading","then","data","status","console","log","newPayload","type","msg","message","updateRequestResponse","payload","error","state","clearResponse","fetchSuccess"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,KAAjB,QAA8B,YAA9B;AACA,SAAQC,gBAAR,QACO,yBADP;AAEA,SAAQC,IAAR,EAAaC,WAAb,QAA+B,kBAA/B;AACA,MAAMC,SAAS,GAAG;AACdC,EAAAA,KAAK,EAAC,EADQ;AAEdC,EAAAA,SAAS,EAAE,KAFG;AAGdC,EAAAA,eAAe,EAAC,EAHF;AAKdC,EAAAA,UAAU,EAAER,KAAK,CAAES,OAAD,IAAa;AAC3BA,IAAAA,OAAO,CAACC,eAAR;AACAT,IAAAA,gBAAgB,GACbU,IADH,CACSC,IAAD,IAAU;AACd,UAAIA,IAAI,CAACC,MAAT,EAAiB;AACbC,QAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACF,cAAMI,UAAU,GAAG;AACjBC,UAAAA,IAAI,EAAE,SADW;AAEjBC,UAAAA,GAAG,EAAEN,IAAI,CAACA,IAAL,CAAUO;AAFE,SAAnB;AAIAV,QAAAA,OAAO,CAACW,qBAAR,CAA8BJ,UAA9B;AACAP,QAAAA,OAAO,CAACC,eAAR;AAGD,OAVD,MAWM;AACF,cAAMW,OAAO,GAAG;AACZJ,UAAAA,IAAI,EAAE,OADM;AAEZC,UAAAA,GAAG,EAACN,IAAI,CAACU;AAFG,SAAhB;AAIAb,QAAAA,OAAO,CAACW,qBAAR,CAA8BC,OAA9B;AACAZ,QAAAA,OAAO,CAACC,eAAR;AACH;AACF,KArBH;AAsBD,GAxBc,CALH;AA+BV;AACJA,EAAAA,eAAe,EAAEX,MAAM,CAAEwB,KAAD,IAAW;AAC/BA,IAAAA,KAAK,CAACjB,SAAN,GAAkB,CAACiB,KAAK,CAACjB,SAAzB;AACH,GAFsB,CAhCT;AAoCdc,EAAAA,qBAAqB,EAAErB,MAAM,CAAC,CAACwB,KAAD,EAAQF,OAAR,KAAoB;AAC9CE,IAAAA,KAAK,CAAChB,eAAN,GAAwBc,OAAxB;AACH,GAF4B,CApCf;AAwCdG,EAAAA,aAAa,EAAEzB,MAAM,CAAEwB,KAAD,IAAW;AAC7BA,IAAAA,KAAK,CAAChB,eAAN,GAAwB,IAAxB;AACH,GAFoB,CAxCP;AA4CdkB,EAAAA,YAAY,EAAE1B,MAAM,CAAC,CAACwB,KAAD,EAAQF,OAAR,KAAmB;AACpCE,IAAAA,KAAK,CAAClB,KAAN,GAAcgB,OAAd;AACH,GAFmB;AA5CN,CAAlB;AAiDA,eAAejB,SAAf","sourcesContent":["import { action, thunk } from \"easy-peasy\";\nimport {FetchTodoService, \n} from '../services/todoService'\nimport {item,sessionItem} from '../configs/index'\nconst todoModel = {\n    todos:[],\n    isLoading: false,\n    requestResponse:\"\",\n\n    fetchTodos: thunk((Actions) => {\n        Actions.toggleIsLoading();\n        FetchTodoService()\n          .then((data) => {\n            if (data.status) {\n                console.log(data)\n              const newPayload = {\n                type: \"success\",\n                msg: data.data.message,\n              };\n              Actions.updateRequestResponse(newPayload)\n              Actions.toggleIsLoading();  \n              \n                    \n            }\n             else {\n                const payload = {\n                    type: 'error',\n                    msg:data.error\n                }\n                Actions.updateRequestResponse(payload);\n                Actions.toggleIsLoading();\n            }\n          })\n      }),\n\n        //actions\n    toggleIsLoading: action((state) => {\n        state.isLoading = !state.isLoading;\n    }),\n\n    updateRequestResponse: action((state, payload) => {\n        state.requestResponse = payload;\n    }),\n\n    clearResponse: action((state) => {\n        state.requestResponse = null;\n    }),\n\n    fetchSuccess: action((state, payload)=> {\n        state.todos = payload;\n    })\n}\n\nexport default todoModel;"]},"metadata":{},"sourceType":"module"}